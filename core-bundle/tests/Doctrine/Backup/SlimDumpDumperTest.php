<?php

declare(strict_types=1);

/*
 * This file is part of Contao.
 *
 * (c) Leo Feyer
 *
 * @license LGPL-3.0-or-later
 */

namespace Contao\CoreBundle\Tests\Doctrine\Backup;

use Contao\CoreBundle\Doctrine\Backup\Backup;
use Contao\CoreBundle\Doctrine\Backup\BackupManagerException;
use Contao\CoreBundle\Doctrine\Backup\Config\CreateConfig;
use Contao\CoreBundle\Doctrine\Backup\SlimDumpDumper;
use Contao\TestCase\ContaoTestCase;
use Doctrine\DBAL\Connection;
use Doctrine\DBAL\Schema\AbstractSchemaManager;
use Doctrine\DBAL\Schema\Table;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Filesystem\Filesystem;
use Webfactory\Slimdump\Config\Config;
use Webmozart\PathUtil\Path;

class SlimDumpDumperTest extends ContaoTestCase
{
    protected function setUp(): void
    {
        parent::setUp();

        (new Filesystem())->mkdir($this->getBackupDir());
    }

    protected function tearDown(): void
    {
        parent::tearDown();

        (new Filesystem())->remove($this->getBackupDir());
    }

    /**
     * @dataProvider successfulDumpProvider
     */
    public function testSuccessfulDump(bool $enableGzCompression, \Closure $expectedClosure): void
    {
        $backup = Backup::createNewAtPath(
            $this->getBackupDir(),
            \DateTime::createFromFormat(\DateTime::ISO8601, '2021-11-03T13:36:00+0000')
        )
        ;
        $connection = $this->mockConnection();
        $dumper = $this->createPartialMock(SlimDumpDumper::class, ['doDump']);

        $dumper
            ->expects($this->once())
            ->method('doDump')
            ->with(
                $connection,
                $this->callback(
                    function (Config $config) {
                        $this->assertCount(1, $config->getTables());
                        $table = $config->findTable('tl_page');

                        $reflection = new \ReflectionClass($table);
                        $dump = $reflection->getProperty('dump');
                        $dump->setAccessible(true);

                        $this->assertSame(Config::FULL, $dump->getValue($table));

                        return true;
                    }
                ),
                104857600,
                $this->isInstanceOf(OutputInterface::class)
            )
        ;

        $config = new CreateConfig($backup);
        $config = $config->withGzCompression($enableGzCompression);

        $dumper->dump($connection, $config);

        $this->assertTrue($expectedClosure(file_get_contents($backup->getFilepath())));
    }

    public function testUnsuccessfulDump(): void
    {
        $this->expectException(BackupManagerException::class);
        $this->expectExceptionMessage('Error!');

        $connection = $this->mockConnection();
        $dumper = $this->createPartialMock(SlimDumpDumper::class, ['doDump']);

        $dumper
            ->expects($this->once())
            ->method('doDump')
            ->willThrowException(new \Exception('Error!'))
        ;

        $dumper->dump($connection, new CreateConfig(Backup::createNewAtPath($this->getBackupDir())));
    }

    public function successfulDumpProvider(): \Generator
    {
        yield 'Without Gzip compression' => [
            false,

            function ($backupContent) {
                $this->assertSame(
                    <<<'DUMP'
                        -- Generated by the Contao Open Source CMS Backup Manager (version: v1).
                        -- Generated at 2021-11-03T13:36:00+0000

                        DUMP,
                    $backupContent
                );

                return true;
            },
        ];

        yield 'With Gzip compression' => [
            true,
            function ($backupContent) {
                // Assert it's gzipped
                $this->assertTrue(0 === mb_strpos($backupContent, "\x1f"."\x8b"."\x08", 0, 'US-ASCII'));

                return true;
            },
        ];
    }

    private function mockConnection()
    {
        $schemaManager = $this->createMock(AbstractSchemaManager::class);
        $schemaManager
            ->expects($this->once())
            ->method('listTables')
            ->willReturn([new Table('tl_page')])
        ;

        $connection = $this->createMock(Connection::class);
        $connection
            ->expects($this->once())
            ->method('createSchemaManager')
            ->willReturn($schemaManager)
        ;

        return $connection;
    }

    private function getBackupDir(): string
    {
        return Path::join($this->getTempDir(), 'backups');
    }
}
