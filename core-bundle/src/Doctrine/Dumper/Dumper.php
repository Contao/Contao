<?php

declare(strict_types=1);

/*
 * This file is part of Contao.
 *
 * (c) Leo Feyer
 *
 * @license LGPL-3.0-or-later
 */

namespace Contao\CoreBundle\Doctrine\Dumper;

use Contao\CoreBundle\Doctrine\Dumper\Config\AbstractConfig;
use Contao\CoreBundle\Doctrine\Dumper\Config\DumpConfig;
use Contao\CoreBundle\Doctrine\Dumper\Config\ImportConfig;
use Doctrine\DBAL\Connection;
use Doctrine\DBAL\Exception;
use Doctrine\DBAL\Schema\Table;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Output\StreamOutput;
use Symfony\Component\Filesystem\Filesystem;
use Webfactory\Slimdump\Config\Config;
use Webfactory\Slimdump\Config\ConfigBuilder;
use Webfactory\Slimdump\DumpTask;

/**
 * @internal
 * @final
 */
class Dumper
{
    private const DUMP_HEADER = '-- Generated by the Contao Open Source CMS database dumper (version: %s).';
    private const DUMP_VERSION = 'v1';

    private Connection $connection;

    public function __construct(Connection $connection, string $projectDir, array $tablesToIgnore)
    {
        $this->connection = $connection;
        $this->projectDir = $projectDir;
        $this->tablesToIgnore = $tablesToIgnore;
    }

    public function createDefaultDumpConfig(): DumpConfig
    {
        return (new DumpConfig($this->getDefaultFileName()))
            ->withTablesToIgnore($this->tablesToIgnore)
        ;
    }

    public function createDefaultImportConfig(): ImportConfig
    {
        return (new ImportConfig($this->getDefaultFileName()))
            ->withTablesToIgnore($this->tablesToIgnore)
        ;
    }

    /**
     * @throws DumperException
     */
    public function dump(DumpConfig $config): void
    {
        // Ensure the target file exists and is empty
        (new Filesystem())->dumpFile($config->getFilePath(), '');

        $handle = fopen($config->getFilePath(), 'w');
        $deflateContext = $config->isGzCompressionEnabled() ? deflate_init(ZLIB_ENCODING_GZIP, ['level' => 9]) : null;

        $output = $this->getDumperOutput($handle, $deflateContext);
        $output->writeln($this->getDumpHeader());

        try {
            $dumptask = new DumpTask($this->connection, $this->createSlimDumpConfig($config), true, true, $config->getBufferSize(), $output);
            $dumptask->dump();
        } catch (\Exception $e) {
            throw new DumperException($e->getMessage());
        }

        if ($deflateContext) {
            fwrite($handle, deflate_add($deflateContext, '', ZLIB_FINISH));
        }

        fclose($handle);
    }

    /**
     * @throws DumperException
     */
    public function import(ImportConfig $config): void
    {
        if (!file_exists($config->getFilePath())) {
            throw new DumperException(sprintf('Dump does not exist at "%s".', $config->getFilePath()));
        }

        if ($config->mustTruncate()) {
            $this->truncate($config);
        }

        $handle = $config->isGzCompressionEnabled() ? gzopen($config->getFilePath(), 'r') : fopen($config->getFilePath(), 'r');

        $currentQuery = '';
        $checkedForHeader = false;

        while ($line = $config->isGzCompressionEnabled() ? gzgets($handle) : fgets($handle)) {
            $line = trim($line);

            if (!$checkedForHeader) {
                if ($line !== $this->getDumpHeader()) {
                    throw new DumperException('The Contao database importer only supports dumps generated by Contao.');
                }
                $checkedForHeader = true;
                continue;
            }

            // Current query ends
            if (';' === substr($currentQuery, -1)) {
                $this->executeWrappedQuery($currentQuery);
                $currentQuery = '';
                continue;
            }

            $currentQuery .= $line;
        }

        if ('' !== $currentQuery) {
            $this->executeWrappedQuery($currentQuery);
        }
    }

    private function getDefaultFileName(): string
    {
        return sprintf('%s/var/db_dump.sql.gz', $this->projectDir);
    }

    private function getDumpHeader(): string
    {
        return sprintf(self::DUMP_HEADER, self::DUMP_VERSION);
    }

    private function createSlimDumpConfig(AbstractConfig $config): Config
    {
        $tables = $this->connection->createSchemaManager()->listTables();
        $tableNames = array_map(static fn (Table $table) => $table->getName(), $tables);

        $tableNames = array_diff($tableNames, $config->getTablesToIgnore());

        $doc = new \DOMDocument();
        $slimDump = $doc->createElement('slimdump');

        foreach ($tableNames as $tableName) {
            $table = $doc->createElement('table');
            $table->setAttribute('name', $tableName);
            $table->setAttribute('dump', 'full');
            $slimDump->appendChild($table);
        }

        $doc->appendChild($slimDump);

        return ConfigBuilder::createFromXmlString($doc->saveXML());
    }

    /**
     * @throws DumperException
     */
    private function truncate(ImportConfig $config): void
    {
        $tables = $this->connection->getSchemaManager()->listTableNames();

        foreach ($tables as $table) {
            if (\in_array($table, $config->getTablesToIgnore(), true)) {
                continue;
            }

            $this->executeWrappedQuery('TRUNCATE TABLE '.$this->connection->quoteIdentifier($table));
        }
    }

    /**
     * @throws DumperException
     */
    private function executeWrappedQuery(string $query): void
    {
        try {
            $this->connection->executeQuery($query);
        } catch (Exception $e) {
            throw new DumperException($e->getMessage());
        }
    }

    private function getDumperOutput($handle, $deflateContext = null): OutputInterface
    {
        $output = new class($handle) extends StreamOutput {
            private $deflateContext;

            public function setDeflateContext($deflateContext): void
            {
                $this->deflateContext = $deflateContext;
            }

            protected function doWrite(string $message, bool $newline): void
            {
                if ($newline) {
                    $message .= \PHP_EOL;
                }

                if ($this->deflateContext) {
                    $message = deflate_add($this->deflateContext, $message, ZLIB_NO_FLUSH);
                }

                parent::doWrite($message, false);
            }
        };

        $output->setDeflateContext($deflateContext);

        return $output;
    }
}
