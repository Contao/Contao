<?php

declare(strict_types=1);

/*
 * This file is part of Contao.
 *
 * (c) Leo Feyer
 *
 * @license LGPL-3.0-or-later
 */

namespace Contao\CoreBundle\Doctrine\Backup;

use Contao\CoreBundle\Doctrine\Backup\Config\AbstractConfig;
use Contao\CoreBundle\Doctrine\Backup\Config\CreateConfig;
use Contao\CoreBundle\Doctrine\Backup\Config\RestoreConfig;
use Doctrine\DBAL\Connection;
use Doctrine\DBAL\Schema\Table;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Console\Output\StreamOutput;
use Symfony\Component\Filesystem\Filesystem;
use Symfony\Component\Finder\Finder;
use Webfactory\Slimdump\Config\Config;
use Webfactory\Slimdump\Config\ConfigBuilder;
use Webfactory\Slimdump\DumpTask;

/**
 * @internal
 * @final
 */
class BackupManager
{
    private const DUMP_HEADER = '-- Generated by the Contao Open Source CMS Backup Manager (version: %s).';
    private const DUMP_VERSION = 'v1';

    private Connection $connection;
    private string $backupDir = '';
    private array $tablesToIgnore = [];
    private int $keepMax = 0;

    public function __construct(Connection $connection, string $backupDir, array $tablesToIgnore, int $keepMax)
    {
        $this->connection = $connection;
        $this->backupDir = $backupDir;
        $this->tablesToIgnore = $tablesToIgnore;
        $this->keepMax = $keepMax;
    }

    public function createCreateConfig(): CreateConfig
    {
        $config = new CreateConfig(Backup::createNewAtPath($this->backupDir));

        return $config->withTablesToIgnore($this->tablesToIgnore);
    }

    /**
     * @throws BackupManagerException
     */
    public function createRestoreConfig(): RestoreConfig
    {
        $latestBackup = $this->getLatestBackup();

        if (null === $latestBackup) {
            throw new BackupManagerException('No backups found.');
        }

        $config = new RestoreConfig($latestBackup);

        return $config->withTablesToIgnore($this->tablesToIgnore);
    }

    public function getLatestBackup(): ?Backup
    {
        return $this->listBackups()[0] ?? null;
    }

    /**
     * Lists all backups (latest one first).
     *
     * @return array<Backup>
     */
    public function listBackups(): array
    {
        (new Filesystem())->mkdir($this->backupDir); // Ensures, the directory exists

        $backups = [];
        $files = Finder::create()
            ->files()
            ->in($this->backupDir)
            ->depth('== 0')
            ->name(Backup::VALID_BACKUP_NAME_REGEX)
        ;

        foreach ($files as $file) {
            $backups[] = new Backup($file->getPathname());
        }

        uasort($backups, static fn (Backup $a, Backup $b) => $b->getCreatedAt() <=> $a->getCreatedAt());

        return array_values($backups);
    }

    /**
     * @throws BackupManagerException
     */
    public function create(CreateConfig $config): void
    {
        $this->executeTransactional(
            function () use ($config): void {
                $this->doCreate($config);
            }
        );
    }

    /**
     * @throws BackupManagerException
     */
    public function restore(RestoreConfig $config): void
    {
        $this->executeTransactional(
            function () use ($config): void {
                $this->doRestore($config);
            }
        );
    }

    /**
     * @throws BackupManagerException
     */
    private function executeTransactional(\Closure $func): void
    {
        $isAutoCommit = $this->connection->isAutoCommit();

        if ($isAutoCommit) {
            $this->connection->setAutoCommit(false);
        }

        try {
            $this->connection->transactional($func);
        } catch (BackupManagerException $e) {
            throw $e;
        } catch (\Throwable $t) {
            throw new BackupManagerException($t->getMessage(), 0, $t);
        }

        if ($isAutoCommit) {
            $this->connection->setAutoCommit(true);
        }
    }

    /**
     * @throws BackupManagerException
     */
    private function doCreate(CreateConfig $config): void
    {
        $backup = $config->getBackup();

        // Ensure the target file exists and is empty
        (new Filesystem())->dumpFile($backup->getFilepath(), '');

        $handle = fopen($backup->getFilepath(), 'w');
        $deflateContext = $config->isGzCompressionEnabled() ? deflate_init(ZLIB_ENCODING_GZIP, ['level' => 9]) : null;

        $output = $this->getDumperOutput($handle, $deflateContext);
        $output->writeln($this->getDumpHeader());
        $output->writeln('-- Generated at '.$backup->getCreatedAt()->format(\DateTimeInterface::ISO8601));

        try {
            $dumptask = new DumpTask($this->connection, $this->createSlimDumpConfig($config), true, true, $config->getBufferSize(), $output);
            $dumptask->dump();
        } catch (\Exception $e) {
            throw new BackupManagerException($e->getMessage(), 0, $e);
        }

        if ($deflateContext) {
            fwrite($handle, deflate_add($deflateContext, '', ZLIB_FINISH));
        }

        fclose($handle);

        $this->tidyDirectory();
    }

    /**
     * @throws BackupManagerException
     */
    private function doRestore(RestoreConfig $config): void
    {
        $backup = $config->getBackup();

        if (!file_exists($backup->getFilepath())) {
            throw new BackupManagerException(sprintf('Dump does not exist at "%s".', $backup->getFilepath()));
        }

        $handle = $config->isGzCompressionEnabled() ? gzopen($backup->getFilepath(), 'r') : fopen($backup->getFilePath(), 'r');

        $currentQuery = '';
        $checkedForHeader = $config->ignoreOriginCheck();

        while ($line = $config->isGzCompressionEnabled() ? gzgets($handle) : fgets($handle)) {
            $line = trim($line);

            if (!$checkedForHeader) {
                if ($line !== $this->getDumpHeader()) {
                    throw new BackupManagerException('The Contao database importer only supports dumps generated by Contao.');
                }
                $checkedForHeader = true;
                continue;
            }

            // Ignore comments
            if ('--' === substr($line, 0, 2)) {
                continue;
            }

            $currentQuery .= $line;

            // Current query ends
            if (';' === substr($currentQuery, -1)) {
                $this->executeWrappedQuery($currentQuery);
                $currentQuery = '';
            }
        }

        if ('' !== $currentQuery) {
            $this->executeWrappedQuery($currentQuery);
        }
    }

    private function tidyDirectory(): void
    {
        $i = 0;

        foreach ($this->listBackups() as $backup) {
            if ($i >= $this->keepMax) {
                (new Filesystem())->remove($backup->getFilepath());
            }
            ++$i;
        }
    }

    private function getDumpHeader(): string
    {
        return sprintf(self::DUMP_HEADER, self::DUMP_VERSION);
    }

    private function createSlimDumpConfig(AbstractConfig $config): Config
    {
        $tables = $this->connection->createSchemaManager()->listTables();
        $tableNames = array_map(static fn (Table $table) => $table->getName(), $tables);

        $tableNames = array_diff($tableNames, $config->getTablesToIgnore());

        $doc = new \DOMDocument();
        $slimDump = $doc->createElement('slimdump');

        foreach ($tableNames as $tableName) {
            $table = $doc->createElement('table');
            $table->setAttribute('name', $tableName);
            $table->setAttribute('dump', 'full');
            $slimDump->appendChild($table);
        }

        $doc->appendChild($slimDump);

        return ConfigBuilder::createFromXmlString($doc->saveXML());
    }

    /**
     * @throws BackupManagerException
     */
    private function executeWrappedQuery(string $query): void
    {
        try {
            $this->connection->executeQuery($query);
        } catch (\Exception $e) {
            throw new BackupManagerException($e->getMessage(), 0, $e);
        }
    }

    private function getDumperOutput($handle, $deflateContext = null): OutputInterface
    {
        $output = new class($handle) extends StreamOutput {
            private $deflateContext;

            public function setDeflateContext($deflateContext): void
            {
                $this->deflateContext = $deflateContext;
            }

            protected function doWrite(string $message, bool $newline): void
            {
                if ($newline) {
                    $message .= \PHP_EOL;
                }

                if ($this->deflateContext) {
                    $message = deflate_add($this->deflateContext, $message, ZLIB_NO_FLUSH);
                }

                parent::doWrite($message, false);
            }
        };

        $output->setDeflateContext($deflateContext);

        return $output;
    }
}
